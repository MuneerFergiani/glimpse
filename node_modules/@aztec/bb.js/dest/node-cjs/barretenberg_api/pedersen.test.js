"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_js_1 = require("../barretenberg/index.js");
const index_js_2 = require("../types/index.js");
describe('pedersen', () => {
    let api;
    beforeAll(async () => {
        api = await index_js_1.Barretenberg.new(1);
        await api.pedersenHashInit();
    }, 30000);
    afterAll(async () => {
        await api.destroy();
    });
    it('pedersenCompressFields', async () => {
        const result = await api.pedersenCompressFields(new index_js_2.Fr(4n), new index_js_2.Fr(8n));
        expect(result).toEqual(new index_js_2.Fr(1521373897829389584529155077412196627698249315427143054350987371861781120260n));
    });
    it('pedersenPlookupCompressFields', async () => {
        const result = await api.pedersenPlookupCompressFields(new index_js_2.Fr(4n), new index_js_2.Fr(8n));
        expect(result).toEqual(new index_js_2.Fr(1521373897829389584529155077412196627698249315427143054350987371861781120260n));
    });
    it('pedersenCompress', async () => {
        const result = await api.pedersenCompress([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(16354408412011670665169322571938780771784319449166930406648760506154417354381n));
    });
    it('pedersenPlookupCompress', async () => {
        const result = await api.pedersenPlookupCompress([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(16354408412011670665169322571938780771784319449166930406648760506154417354381n));
    });
    it('pedersenCompressWithHashIndex', async () => {
        const result = await api.pedersenCompressWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 7);
        expect(result).toEqual(new index_js_2.Fr(2152386650411553803409271316104075950536496387580531018130718456431861859990n));
    });
    it('pedersenCommit', async () => {
        const result = await api.pedersenCommit([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(18374309251862457296563484909553154519357910650678202211610516068880120638872n));
    });
    it('pedersenPlookupCommit', async () => {
        const result = await api.pedersenPlookupCommit([new index_js_2.Fr(4n), new index_js_2.Fr(8n)]);
        expect(result).toEqual(new index_js_2.Fr(7336965135159957330095956915667769834743631571088528744280187985812103412470n));
    });
    it('pedersenBufferToField', async () => {
        const result = await api.pedersenBufferToField(Buffer.from('Hello world! I am a buffer to be converted to a field!'));
        expect(result).toEqual(new index_js_2.Fr(5836632387256708040349959803326023895450290698906238002955147410646852307074n));
    });
    it('pedersenHashPair', async () => {
        const result = await api.pedersenHashPair(new index_js_2.Fr(4n), new index_js_2.Fr(8n));
        expect(result).toEqual(new index_js_2.Fr(1521373897829389584529155077412196627698249315427143054350987371861781120260n));
    });
    it('pedersenHashMultiple', async () => {
        const result = await api.pedersenHashMultiple([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n)]);
        expect(result).toEqual(new index_js_2.Fr(16354408412011670665169322571938780771784319449166930406648760506154417354381n));
    });
    it('pedersenHashMultipleWithHashIndex', async () => {
        const result = await api.pedersenHashMultipleWithHashIndex([new index_js_2.Fr(4n), new index_js_2.Fr(8n)], 7);
        expect(result).toEqual(new index_js_2.Fr(2152386650411553803409271316104075950536496387580531018130718456431861859990n));
    });
    it('pedersenHashToTree', async () => {
        const result = await api.pedersenHashToTree([new index_js_2.Fr(4n), new index_js_2.Fr(8n), new index_js_2.Fr(12n), new index_js_2.Fr(16n)]);
        expect(result).toEqual([
            new index_js_2.Fr(4n),
            new index_js_2.Fr(8n),
            new index_js_2.Fr(12n),
            new index_js_2.Fr(16n),
            new index_js_2.Fr(1521373897829389584529155077412196627698249315427143054350987371861781120260n),
            new index_js_2.Fr(18350527319045519333962768191016242826584323959670139897255818770108115223653n),
            new index_js_2.Fr(5972535902427608430534212385621973704186819235181735133037695406667218179357n),
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVkZXJzZW4udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iYXJyZXRlbmJlcmdfYXBpL3BlZGVyc2VuLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1REFBd0Q7QUFDeEQsZ0RBQXVDO0FBRXZDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0lBQ3hCLElBQUksR0FBaUIsQ0FBQztJQUV0QixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsR0FBRyxHQUFHLE1BQU0sdUJBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsTUFBTSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFVixRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEIsTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsc0JBQXNCLENBQUMsSUFBSSxhQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxhQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4RSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksYUFBRSxDQUFDLDZFQUE2RSxDQUFDLENBQUMsQ0FBQztJQUNoSCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3QyxNQUFNLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLGFBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLGFBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9FLE1BQU0sQ0FBQyxNQUFNLENB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